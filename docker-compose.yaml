version: "3.8"
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-chordster
    ports:
      - '8080:8080'
    environment:
      VITE_PORT: 8080

  song:
    container_name: song-service-chordster
    build:
      context: ./backend/song-service
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      DATABASE_URL: "postgresql://postgres:werty1232@postgres-song-service:5432/chordster?schema=song-service"
    env_file:
      - ./backend/song-service/.env
    depends_on:
      postgres-song-service:
        condition: service_healthy

  postgres-song-service:
    image: postgres:latest
    container_name: postgres-song-service
    volumes:
      - postgresDB:/data/postgres/song-service
    environment:
      POSTGRES_PASSWORD: 'werty1232'
      POSTGRES_USER: 'postgres'
      POSTGRES_DB: 'chordster'
    env_file:
      - ./backend/song-service/.env
    ports: 
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready'"]
      interval: 15s
      timeout: 15s
      start_period: 90s
      retries: 3

  user:
    container_name: user-service-chordster
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      DATABASE_URL: "mongodb://mongo-user-service:27017/chordsterv2"
    env_file:
      - ./backend/user-service/.env
    depends_on:
       - mongo-user-service
      
  mongo-user-service:
    image: mongo
    container_name: mongo-user-service
    ports:
      - '27017:27017'
    volumes:
      - mongoDB:/data/mongo/user-service


volumes:
  postgresDB:
  mongoDB:
